<?php

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

function acfef_validate_form( $args ) {
    //print("<pre>".print_r($args,true)."</pre>");

    if( ! isset( $args[ 'post_id' ] ) ) $args = acfef_get_form_data( $args );
		
    // defaults
    // Todo: Allow message and button text to be generated by CPT settings.
    $args = wp_parse_args( $args, array(
        'id'					=> 'acf-form',
        'parent_form'			=> '',
        'post_id'				=> false,
        'new_post'				=> false,
        'fields'				=> false,
        'post_title'			=> false,
        'post_content'			=> false,
        'form'					=> true,
        'form_title'    		=> '',
        'form_attributes'		=> array(),
        'saved_drafts'		    => array(),
        'return'				=> add_query_arg( 'updated', 'true', acf_get_current_url() ),
        'html_before_fields'	=> '',
        'hidden_fields'         => [],
        'html_after_fields'		=> '',
        'submit_value'			=> __("Update", 'acf'),
        'update_message'		=> __("Post updated", 'acf'),
        'label_placement'		=> 'top',
        'instruction_placement'	=> 'label',
        'field_el'				=> 'div',
        'uploader'				=> 'wp',
        'honeypot'				=> true,
        'show_update_message'   => true,
        'html_updated_message'	=> '<div id="message" class="updated"><p>%s</p></div>', 
        'html_submit_spinner'	=> '<span class="acf-spinner"></span>', 
        'kses'					=> true
    ));
    
    $args['form_attributes'] = wp_parse_args( $args['form_attributes'], array(
        'id'					=> $args['id'],
        'class'					=> 'acfef-form',
        'action'				=> '',
        'method'				=> 'post',
        'autocomplete'          => 'disableacf',
        'novalidate'            => 'novalidate',
    ));

    if( isset( $args[ 'save_progress' ] ) ){
        $args[ 'html_submit_button' ] .= $args[ 'save_progress' ];
    }
        
    // filter post_id
    $args['post_id'] = acf_get_valid_post_id( $args['post_id'] );   
    
    // new post?
    if( $args['post_id'] === 'new_post' ) {
        
        $args['new_post'] = wp_parse_args( $args['new_post'], array(
            'post_type' 	=> 'post',
            'post_status'	=> 'draft',
        ));
        
    }    
    
    // filter
    $args = apply_filters('acf/validate_form', $args);    
    
    // return
    return $args;
    
}
function acfef_step_tabs( $args, $current_step ){
    $editor = \Elementor\Plugin::$instance->editor->is_edit_mode();
    $current_post = get_post();
    $active_user = wp_get_current_user();
    $screens = [ 'desktop', 'tablet', 'phone' ];
    
    $tabs_responsive = '';	
    if( isset( $args[ 'steps_tabs_display' ] ) ){
        foreach( $screens as $screen ){
            if( ! in_array( $screen, $args[ 'steps_tabs_display' ] ) ){
                $tabs_responsive .= 'elementor-hidden-' . $screen . ' ';
            }
        }
    }
    
    $counter_responsive = '';
    if( isset( $args[ 'steps_counter_display' ] ) ){
        foreach( $screens as $screen => $label ){
            if( ! in_array( $screen, $args[ 'steps_counter_display' ] ) ){
                $counter_responsive .= 'elementor-hidden-' . $screen . ' ';
            }
        }
    }

    $total_steps = count( $args[ 'fields' ][ 'steps' ] );
    
    echo '<div class="acfef-tabs elementor-tabs"><div class="acfef-tabs-wrapper ' . $tabs_responsive . '">';
    $steps = $args[ 'fields' ][ 'steps' ];
/*     $fa_steps = [];
    $fa_steps_args = [
        'fields', 'emails_to_send', 'form_title', 'next_button_text', 'prev_button_text', 'main_action', 'new_post_status','post_to_edit', 'post_select', 'new_post_type', 'new_post_terms', 'new_terms_select', 'save_progress_button', 'saved_draft_desc', 'saved_drafts', 'user_to_edit', 'user_select','username_default', 'username_suffix', 'display_name_default', 'new_user_role', 'hide_admin_bar', 'login_user', 'user_manager', 'manager_select', 'new_product_status', 'product_to_edit', 'product_select', 'new_product_terms', 'new_product_terms_select', 'comment_parent_post', 'select_parent_post', 'term_to_edit', 'term_select', 'new_term_taxonomy', 
    ]; */

    if( in_array( 'tabs', $args[ 'steps_display' ] ) ){

        foreach( $steps as $step_count => $form_step ){

            $active = '';
            if( $step_count == $current_step ){
                $active = 'active';
            }

            $change_step = '';
            if( $editor || $args[ 'tab_links' ] ){
                $change_step = ' change-step';
            }
                
            $step_title = $form_step[ 'form_title' ] ? $form_step[ 'form_title' ] : $args[ 'form_title' ];
            if( $form_step[ 'step_tab_text' ] ){
                $step_title = $form_step[ 'step_tab_text' ];
            }
            if( $step_title == '' ){
                $step_title = __( 'Step', 'acf-frontend-form-element' ) . ' ' . $step_count;
            }else{
                if( $args[ 'step_number' ] ){
                    $step_title = $step_count . '. ' . $step_title;
                }
            }

            echo '<a class="form-tab ' . $active . $change_step. '" data-step="' .$step_count. '"><p class="step-name">' . $step_title . '</p></a>';
        }
        
    }

    echo '</div>';
    
    echo '<div class="form-steps elementor-tabs-content-wrapper">';

    if( in_array( 'counter', $args[ 'steps_display' ] ) ){
        echo '<div class="' . $counter_responsive . 'step-count"><p>' . $args[ 'counter_prefix' ] .  $current_step . '/' . $total_steps . $args[ 'counter_suffix' ] . '</p></div>';
    }	
}
function acfef_multi_step_buttons( $args, $current_step ){
    $prev_button = $buttons_class = '';
            
    $form_step = $args[ 'fields' ][ 'steps' ][ $current_step ];
    if( $current_step > 1 ){  
        if($form_step[ 'prev_button_text' ] ){
            $prev_step = $current_step-1;
            $prev_button = '<input type="hidden" name="prev_step_num" value="' . $prev_step . '"/>';
            $prev_button .= '<input type="button" name="prev_step" class="acfef-prev-button acfef-submit-button acf-button button button-primary" value="' . $form_step[ 'prev_button_text' ] . '"/> ';
            $buttons_class = 'acfef-multi-buttons-align';
        }
    }
    
    $next_button = '<input type="submit" class="acfef-submit-button acf-button button button-primary" value="' . $form_step[ 'next_button_text' ] . '" />';
    
    $submit_button =  '<div class="acf-form-submit"><div class="acfef-submit-buttons ' . $buttons_class . '">' . $prev_button . $next_button . '<span class="acf-spinner"></span></div></div>';

    return $submit_button;
}


function acfef_render_form( $args = array() ) {
    acf_enqueue_scripts();
    
    $args = acfef_validate_form( $args );

    ?>
    <form <?php echo acfef_esc_attrs( $args['form_attributes'] ) ?>> 
    <?php
        
    $current_fields = $args[ 'fields' ];    

    if( isset( $args[ 'fields' ][ 'steps' ] ) ){
        $current_step = 1;

        if( isset( $_GET[ 'step' ] ) ) $current_step = $_GET[ 'step' ]; 

        if( isset( $args[ 'step_index' ] ) ){
            $current_step = $args[ 'step_index' ];
        }else{
            $args[ 'step_index' ] = $current_step;
        }

        if( $current_step == count( $args[ 'fields' ][ 'steps' ] ) ) $args[ 'last_step' ] = true;
        $current_fields = $args[ 'fields' ][ 'steps' ][ $current_step ][ 'fields' ];
        if( $current_step > 1 ) $previous_steps = array_slice( $args[ 'fields' ][ 'steps' ], 0, $current_step-1 );
        $form_title = $args[ 'fields' ][ 'steps' ][ $current_step ][ 'form_title' ];

        $submit_button = acfef_multi_step_buttons( $args, $current_step );
        acfef_step_tabs($args, $current_step);
    }else{
        $submit_button = '<div class="acfef-submit-buttons"><input type="submit" class="acfef-submit-button acf-button button button-primary" value="' .$args['submit_value']. '" /><span class="acf-spinner"></span></div>';
        $current_fields = $args[ 'fields' ];
    } 
    if( ! isset( $form_title ) || ! $form_title ){
        $form_title = $args[ 'form_title' ];
    }

    if( $form_title ){
        echo '<h2 class="acfef-form-title">' . $form_title . '</h2>';
    }

    $post_id = $args['post_id'];

    if( $post_id === 'add_post' || $post_id === 'add_product' ) {
        $post_id = false;
    }
    
    // Set uploader type.
    acf_update_setting( 'uploader', $args['uploader'] );
    
    $fields = array();

    if( $current_fields ){
        foreach( $current_fields as $field_data ) {
            if( is_array( $field_data ) ){
                if( isset( $field_data[ 'acf' ] ) ){
                    $field = acf_maybe_get_field( $field_data[ 'acf' ], $post_id, false );
                    if( isset( $field_data[ 'elementor' ] ) ){
                        if( isset( $field[ 'wrapper' ][ 'class' ] ) ){
                            $field[ 'wrapper' ][ 'class' ] .= ' elementor-repeater-item-' . $field_data[ 'elementor' ];
                        }else{
                            $field[ 'wrapper' ][ 'class' ] = 'elementor-repeater-item-' . $field_data[ 'elementor' ];
                        }
                    }
                    $fields[] = $field;
                }else{
                    $fields[] = $field_data;
                }
            }else{
                $fields[] = acf_maybe_get_field( $field_data, $post_id, false );
            }
        }
    }else{
        return;
    }

    acf_add_local_field( array(
        'prefix'	=> 'acf',
        'name'		=> '_validate_email',
        'key'		=> '_validate_email',
        'label'		=> __('Validate Email', 'acf'),
        'type'		=> 'text',
        'value'		=> '',
        'no_save'   => 1,
        'wrapper'	=> array('style' => 'display:none !important;')
    ) );
    $anti_spam_field = acf_get_field('_validate_email');
    
    if( $args['show_update_message'] ){
        if ( isset( $_GET[ 'updated' ] ) && $_GET[ 'updated' ] !== 'true' ){
            $form_id = explode( '_', $_GET[ 'updated' ] );
            $widget_id = $form_id[0];
            $page_id = $widget_page = $form_id[1];
            if( isset( $form_id[2] ) ) $page_id = $form_id[2];

            $update_message = $args['update_message'];
            if( strpos( $update_message, '[' ) !== 'false' ){
                $update_message = acfef_get_code_value( $update_message, $page_id );
            }  

            printf( $args['html_updated_message'], $update_message );
        }    
    }

        acfef_form_render_data( array_merge( array( 
            'screen'	=> 'acf_form',
            'status'    => '',
            'post_id'	=> $args['post_id'],
            'form'		=> acf_encrypt(json_encode( $args ))
        ), $args[ 'hidden_fields' ] ) );
    ?>
    <?php if( isset( $args[ 'template_id' ] ) ){
		echo \Elementor\Plugin::$instance->frontend->get_builder_content_for_display( $args[ 'template_id' ] );
	}else{ ?>
    <div class="acf-fields acf-form-fields -<?php echo esc_attr($args['label_placement'])?>">
        <?php if( isset( $current_step ) ){ 
            if( isset( $previous_steps ) ){
                acfef_render_previous( $previous_steps, $post_id );
            } ?>
            <div class="acf-step-fields step-<?php echo $current_step ?>" data-step="<?php echo $current_step ?>">
        <?php }        
        acfef_render_fields( $fields, $post_id, $args['field_el'], $args['instruction_placement'] ); ?>
        <?php if( isset( $current_step ) ){ ?>
            </div>
        <?php }        
        acfef_render_field_wrap( $anti_spam_field );
        echo $args['html_after_fields']; ?>
    </div>
        <div class="acf-form-submit">
            <?php echo $submit_button; ?>
        </div>
    <?php }
    if( isset( $args[ 'fields' ][ 'steps' ] ) ){
        echo '</div></div>';
    } 
    if( $args[ 'saved_drafts' ] ){
        echo acfef_saved_drafts( $args );
    } ?>
    
    </form>
    <?php
}

function acfef_render_previous( $steps, $post_id = 0 ) {
    if( isset( $steps ) ){
        foreach( $steps as $index => $step ) { ?>
            <div class="acf-step-fields step-<?php echo $index+1 ?>" data-step="<?php echo $index+1 ?>">
            <?php
                foreach( $step[ 'fields' ] as $field_data ) {
                    if( isset( $field_data[ 'acf' ] ) ){
                        $field = acf_maybe_get_field( $field_data[ 'acf' ], $post_id, false );
                        $field[ 'required' ] = 0;
                        if( isset( $field[ 'wrapper' ][ 'class' ] ) ){
                            $field[ 'wrapper' ][ 'class' ] .= ' acfef-hidden';
                        }else{
                            $field[ 'wrapper' ][ 'class' ] = 'acfef-hidden';
                        }

                        if( !isset( $field['value'] ) || $field['value'] === null ) {
                            $field['value'] = acf_get_value( $post_id, $field );
                        } 
                        
                        // Render wrap.
                        acfef_render_field_wrap( $field );
                    }
                }
            ?>
            </div>
            <?php
        }
    }
}

/**
 * acf_render_fields
 *
 * Renders an array of fields. Also loads the field's value.
 *
 * @date	8/10/13
 * @since	5.0.0
 * @since	5.6.9 Changed parameter order.
 *
 * @param	array $fields An array of fields.
 * @param	(int|string) $post_id The post ID to load values from.
 * @param	string $element The wrapping element type.
 * @param	string $instruction The instruction render position (label|field).
 * @return	void
 */
function acfef_render_fields( $fields, $post_id = 0, $el = 'div', $instruction = 'label' ) {
	
	// Parameter order changed in ACF 5.6.9.
	if( is_array($post_id) ) {
		$args = func_get_args();
		$fields = $args[1];
		$post_id = $args[0];
	}
	
	/**
	 * Filters the $fields array before they are rendered.
	 *
	 * @date	12/02/2014
	 * @since	5.0.0
	 *
	 * @param	array $fields An array of fields.
	 * @param	(int|string) $post_id The post ID to load values from.
	 */
	$fields = apply_filters( 'acf/pre_render_fields', $fields, $post_id );
	
	// Filter our false results.
	$fields = array_filter( $fields );
	
	// Loop over and render fields.
	if( $fields ) {
        $open_columns = 0;
		foreach( $fields as $field ) {
            if( isset( $field[ 'column' ] ) ){
                if( $field[ 'column' ] == 'endpoint' ){
                    if( $open_columns ) echo '</div>';
                    $open_columns--;
                }else{
                    if( isset( $field[ 'nested' ] ) ){
                        $open_columns++;
                    }else{
                        if( $open_columns ) echo '</div>';
                        echo '<div class="acf-column elementor-repeater-item-' .$field[ 'column' ]. '">';
                        $open_columns--;
                    }    
                }
            }else{
                // Load value if not already loaded.
                if( !isset( $field['value'] ) || $field['value'] === null ) {
                    $field['value'] = acf_get_value( $post_id, $field );
                } 
                
                // Render wrap.
                acfef_render_field_wrap( $field, $el, $instruction );
            }
        }
        if( $open_columns > 0 ){
            while( $open_columns > 0 ){
                echo '</div>';
                $open_columns--;
            }
        }
	}
	
	/**
	*  Fires after fields have been rendered.
	*
	*  @date	12/02/2014
	*  @since	5.0.0
	*
	* @param	array $fields An array of fields.
	* @param	(int|string) $post_id The post ID to load values from.
	*/
	do_action( 'acf/render_fields', $fields, $post_id );
}

/**
 * acf_render_field_wrap
 *
 * Render the wrapping element for a given field.
 *
 * @date	28/09/13
 * @since	5.0.0
 *
 * @param	array $field The field array.
 * @param	string $element The wrapping element type.
 * @param	string $instruction The instruction render position (label|field).
 * @return	void
 */
function acfef_render_field_wrap( $field, $element = 'div', $instruction = 'label' ) {
	
	// Ensure field is complete (adds all settings).
	$field = acf_validate_field( $field );
	
	// Prepare field for input (modifies settings).
	$field = acf_prepare_field( $field );
	
	// Allow filters to cancel render.
	if( !$field ) {
		return;
	}
	
	// Determine wrapping element.
	$elements = array(
		'div'	=> 'div',
		'tr'	=> 'td',
		'td'	=> 'div',
		'ul'	=> 'li',
		'ol'	=> 'li',
		'dl'	=> 'dt',
	);
	
	if( isset($elements[$element]) ) {
		$inner_element = $elements[$element];
	} else {
		$element = $inner_element = 'div';
	}
		
	// Generate wrapper attributes.
	$wrapper = array(
		'id'		=> '',
		'class'		=> 'acf-field',
		'width'		=> '',
		'style'		=> '',
		'data-name'	=> $field['_name'],
		'data-type'	=> $field['type'],
		'data-key'	=> $field['key'],
	);
	
	// Add field type attributes.
	$wrapper['class'] .= " acf-field-{$field['type']}";
	
	// add field key attributes
	if( $field['key'] ) {
		$wrapper['class'] .= " acf-field-{$field['key']}";
	}
	
	// Add required attributes.
	// Todo: Remove data-required
	if( $field['required'] ) {
		$wrapper['class'] .= ' is-required';
		$wrapper['data-required'] = 1;
	}
	
	// Clean up class attribute.
	$wrapper['class'] = str_replace( '_', '-', $wrapper['class'] );
	$wrapper['class'] = str_replace( 'field-field-', 'field-', $wrapper['class'] );
	
	// Merge in field 'wrapper' setting without destroying class and style.
	if( $field['wrapper'] ) {
		$wrapper = acf_merge_attributes( $wrapper, $field['wrapper'] );
	}
	
	// Extract wrapper width and generate style.
	// Todo: Move from $wrapper out into $field.
	$width = acf_extract_var( $wrapper, 'width' );
	if( $width ) {
		$width = acf_numval( $width );
		if( $element !== 'tr' && $element !== 'td' ) {
			$wrapper['data-width'] = $width;
			$wrapper['style'] .= " width:{$width}%;";
		}
	}
	
	// Clean up all attributes.
	$wrapper = array_map( 'trim', $wrapper );
	$wrapper = array_filter( $wrapper );
	
	/**
	 * Filters the $wrapper array before rendering.
	 *
	 * @date	21/1/19
	 * @since	5.7.10
	 *
	 * @param	array $wrapper The wrapper attributes array.
	 * @param	array $field The field array.
	 */
	$wrapper = apply_filters( 'acf/field_wrapper_attributes', $wrapper, $field );
	
	// Append conditional logic attributes.
	if( !empty($field['conditional_logic']) ) {
		$wrapper['data-conditions'] = $field['conditional_logic'];
	}
	if( !empty($field['conditions']) ) {
		$wrapper['data-conditions'] = $field['conditions'];
	}
	
	// Vars for render.
	$attributes_html = acf_esc_attr( $wrapper );
	
	// Render HTML
	echo "<$element $attributes_html>" . "\n";
		if( $element !== 'td' && ( ! isset( $field[ 'field_label_hide' ] ) || ! $field[ 'field_label_hide' ] ) ) {
            echo "<$inner_element class=\"acf-label\">" . "\n";
                acf_render_field_label( $field );
			echo "</$inner_element>" . "\n";
        }

        echo "<$inner_element class=\"acf-input\">" . "\n";
            if( $instruction == 'label' ) {
                acf_render_field_instructions( $field );
            }
			acf_render_field( $field );
			if( $instruction == 'field' ) {
				acf_render_field_instructions( $field );
			}
		echo "</$inner_element>" . "\n";
	echo "</$element>" . "\n";
}




/*
*  set_data
*
*  Sets data.
*
*  @type	function
*  @date	4/03/2016
*  @since	5.3.2
*
*  @param	array $data An array of data.
*  @return	array
*/

function acfef_form_set_data( $data = array() ) {
    
    // defaults
    $data = wp_parse_args($data, array(
        'screen'		=> 'post',	// Current screen loaded (post, user, taxonomy, etc)
        'post_id'		=> 0,		// ID of current post being edited
        'nonce'			=> '',		// nonce used for $_POST validation (defaults to screen)
        'validation'	=> 1,		// enables form validation
        'changed'		=> 0,		// used by revisions and unload to detect change
    ));
    
    // crete nonce
    $data['nonce'] = wp_create_nonce($data['screen']);

    // return 
    return $data;
}

/**
*  render_data
*
*  Renders the <div id="acf-form-data"> element with hidden "form data" inputs
*
*  @date	17/4/18
*  @since	5.6.9
*
*  @param	array $data An array of data.
*  @return	void
*/

function acfef_form_render_data( $data = array() ) {
    
    // set form data
    $data = acfef_form_set_data( $data );
    
    ?>
    <div class="acf-form-data acf-hidden">
        <?php 
        
        // loop
        foreach( $data as $name => $value ) {
            
            // input
            acf_hidden_input(array(
                'name'	=> '_acf_' . $name,
                'value'	=> $value
            ));
        }
        
        // actions
        do_action('acf/form_data', $data);
        do_action('acf/input/form_data', $data);
        
        ?>
    </div>
    <?php
}

function acfef_get_form_data( $form_args ){
    global $post;
    $active_user = wp_get_current_user();
    $object_id = false;

    if( isset( $_GET[ 'updated' ] ) && isset( $_GET[ 'edit' ] ) ){
        $object = explode( '_', $_GET[ 'updated' ] );
        if( isset( $object[2] ) ){
            if( is_numeric( $object[2] ) ){
                $object_id = $object[2];
            }else{
                $object_id = substr( $object[2], 1 );
            }
        }
    }
        if( isset( $_GET[ 'post_id' ] ) ){
            $object_id = $_GET[ 'post_id' ];
        }
        if( isset( $_GET[ 'user_id' ] ) ){
            $object_id = explode( '_', $_GET[ 'post_id' ] )[1];
        }
        if( isset( $_GET[ 'product_id' ] ) ){
            $object_id = $_GET[ 'product_id' ];
        }

/* 		if( 'new_comment' == $form_args[ 'main_action' ] ){
        $form_args[ 'post_id' ] = 'new_comment';
        if( $form_args[ 'comment_parent_post' ] == 'current_post' ){
            $comment_parent_post = $post->ID;
        }else{
            $comment_parent_post = $form_args[ 'select_parent_post' ];
        }
        $form_args[ 'html_after_fields' ] .= '<input type="hidden" value="' . $comment_parent_post . '" name="acfef_parent_post"/><input type="hidden" value="0" name="acfef_parent_comment"/>';
    } */

    switch( $form_args[ 'hidden_fields' ][ 'main_action' ] ){
        case 'new_post':
            $can_edit = acfef_can_edit_post( $object_id, $form_args );
            if( $can_edit && isset( $_GET[ 'post_id' ] ) ){
                $form_args[ 'post_id' ] = $can_edit;
            }else{
                $form_args[ 'post_id' ] = 'add_post';
            }
            $post_type = $form_args[ 'new_post_type' ];
            $status = $form_args[ 'new_post_status' ] != 'no_change' ? $form_args[ 'new_post_status' ] : 'publish';
            $tax_input = [];
            $form_args[ 'action' ] = 'post';

            if( ! empty( $form_args[ 'new_post_terms' ] ) ){
                if( $form_args[ 'new_post_terms' ] == 'select_terms' ){
                    $form_args[ 'post_terms' ] = $form_args[ 'new_terms_select' ];
                }
                if( $form_args[ 'new_post_terms' ] == 'current_term' ){
                    $form_args[ 'post_terms' ] = get_queried_object()->term_id;
                } 
            }	
            $action = 'post';
            $args = array( 'post_type' => $post_type, 'post_status' => $status );
            break;
        case 'edit_post':
            if( $form_args[ 'post_to_edit' ] == 'current_post' ){
                $form_args[ 'post_id' ] = $post->ID;
            }elseif( $form_args[ 'post_to_edit' ] == 'select_post' ){
                $form_args[ 'post_id' ] = $form_args[ 'post_select' ];
            }elseif( $form_args[ 'post_to_edit' ] == 'url_query' && isset( $_GET[ $form_args[ 'url_query_post' ] ] ) ){
                $form_args[ 'post_id' ] = $_GET[ $form_args[ 'url_query_post' ] ];
            }
            $form_args[ 'action' ] = 'post';
    
            $status = $form_args[ 'new_post_status' ];
            $action = 'post';
            $args = array();
    
            if( $status != 'no_change' ){
                $args[ 'post_status' ] = $status;
            }
            break;
        case 'new_product':
            if( $object_id ){
                $form_args[ 'post_id' ] = acfef_can_edit_post( $object_id, $form_args );
            }else{
                $status = $form_args[ 'new_product_status' ] != 'no_change' ? $form_args[ 'new_product_status' ] : 'publish';
    
                $form_args[ 'post_id' ] = 'add_product';
            
                if( ! empty( $form_args[ 'new_product_terms' ] ) ){
                    if( $form_args[ 'new_product_terms' ] == 'select_terms' ){
                        $form_args[ 'product_terms' ] = $form_args[ 'new_product_terms_select' ];
                    }
                    if( $form_args[ 'new_product_terms' ] == 'current_term' ){
                        $form_args[ 'product_terms' ] = get_queried_object()->term_id;
                    } 
                }
                $action = 'product';
                $args = array( 'post_type' => 'product', 'post_status' => $status, 'tax_input' => [ 'product_type' => 'simple' ] );
            }
            break;
        case 'edit_product':
            $first_product = get_posts( array( 'posts_per_page' => 1, 'post_type' => 'product' ) );

                if( $first_product ){
                    $form_args[ 'post_id' ] = $first_product[0]->ID;
                }else{
                    $form_args[ 'post_id' ] = 'none';
                }

                if( $form_args[ 'product_to_edit' ] == 'select_product' && $form_args[ 'product_select' ] ){
                    $form_args[ 'post_id' ] = $form_args[ 'product_select' ];
                }elseif( $form_args[ 'product_to_edit' ] == 'url_query' && isset( $_GET[ $form_args[ 'url_query_product' ] ] ) ){
                    $form_args[ 'post_id' ] = $_GET[ $form_args[ 'url_query_product' ] ];
                }elseif( $post->post_type == 'product' ){
                    $form_args[ 'post_id' ] = $post->ID;
                }
                $status = $form_args[ 'new_product_status' ];

                $action = 'product';
                $args = array( 'post_type' => 'product' );

                if( $status != 'no_change' ){
                    $args[ 'post_status' ] = $status;
                }
            break;
        case 'new_user':
            if( $object_id ){
                $form_args[ 'post_id' ] = 'user_' . $object_id;
            }else{
                $can_edit = acfef_can_edit_user( $object_id, $form_args );
                if( ! $can_edit || $form_args[ 'redirect_action' ] == 'clear' ){
                    $form_args[ 'post_id' ] = 'user_0';
                }else{
                    $form_args[ 'post_id' ] = 'user_' . $can_edit;
                }
            }
            break;
        case 'edit_user':
            if( $form_args[ 'user_to_edit' ] == 'current_user' ){
                $form_args[ 'post_id' ] = 'user_' . $active_user->ID; 
            }elseif( $form_args[ 'user_to_edit' ] == 'select_user' ){
                $form_args[ 'post_id' ] = 'user_' . $form_args[ 'user_select' ];
            }elseif( $form_args[ 'user_to_edit' ] == 'url_query' && isset( $_GET[ $form_args[ 'url_query_user' ] ] ) ){
                $form_args[ 'post_id' ] = 'user_' . $_GET[ $form_args[ 'url_query_user' ] ];
            }
            break;
        case 'new_term':
            $form_args[ 'post_id' ] = 'new_term';		
            $args = [ 'taxonomy' => $form_args[ 'new_term_taxonomy' ] ];	
            $action = 'term';
            break;
        case 'edit_term':
            $term_name = get_queried_object()->name;
            if( $form_args[ 'term_to_edit' ] == 'select_term' ){
                $form_args[ 'post_id' ] = 'term_' . $form_args[ 'term_select' ];
                if( $form_args[ 'term_select' ] ){
                    $term = get_term( $form_args[ 'term_select' ] );
                    $term_name = $term->name;
                }
            }else{
                $form_args[ 'post_id' ] = 'term_' . get_queried_object()->term_id;
            } 
            break;
    } 

    if( isset( $action ) ){
        $form_args[ $action . '_fields' ] = $args;
    }

    return $form_args;
}


function acfef_saved_drafts( $args ){
    $wg_id = $args[ 'hidden_fields' ][ 'element_id' ];
    global $wp;
    $current_url = home_url( $wp->request );
    $query_args = $_GET;
    $full_link = add_query_arg( $query_args, $current_url );
    $new_link = remove_query_arg( [ 'post_id', 'form_id', 'updated' ], $full_link );
    
    $submits = '<br>';
    $drafts_args = array(
        'posts_per_page' => -1,
        'post_status' => 'draft',	
        'post_type' => 'any',
        'author' => get_current_user_id(),
        'meta_query'  => array(
            array(
                'value'   => $wg_id,
                'compare' => '==',
                'key'     => 'acfef_form_source',
            ),
        )
    );
    $drafts_select_start = '<div class"drafts"><p class="drafts-heading">' . $args[ 'saved_drafts' ][ 'saved_drafts_label' ] . '</p><select id="acfef-form-drafts" ><option selected value="' . $new_link . '">' . $args[ 'saved_drafts' ][ 'saved_drafts_new' ] . '</option>';
    $drafts_select_end = '</select></div>';
    
    $form_submits = get_posts( $drafts_args );
    if( $form_submits ){
        $submits .= $drafts_select_start;

        foreach( $form_submits as $submit ){
            $post_time = get_the_time( get_option( 'date_format' ) . ' ' . get_option( 'time_format' ), $submit->ID);
            $selected = '';
            if( isset( $_GET[ 'post_id' ] ) && isset( $_GET[ 'form_id' ] ) && $submit->ID == $_GET[ 'post_id' ] && $wg_id == $_GET[ 'form_id' ] ){
                $selected = 'selected';
            }
            $query_args[ 'post_id' ] = $submit->ID;
            $query_args[ 'form_id' ] = $wg_id;
            $query_args[ 'draft' ] = 1;				
            if( $args[ 'saved_drafts' ][ 'show_in_modal' ] && $args[ 'saved_drafts' ][ 'open_modal' ] ){
                $query_args[ 'modal' ] = 1;
            }
            $draft_link = add_query_arg( $query_args, $current_url );
            $new_link = remove_query_arg( 'updated', $draft_link );
            $submits .= '<option '. $selected .' value="' . $new_link . '" class="form_submit">' . $submit->post_title . ' (' . $post_time . ')' . '</option>';
        }
        $submits .= $drafts_select_end;
    }elseif( \Elementor\Plugin::$instance->editor->is_edit_mode() ){
        $submits .= $drafts_select_start;
        for( $x = 1; $x < 4; $x++ ){
            $submits .= '<option class="form_submit">Draft ' . $x . ' (' . date( get_option( 'date_format' ) . ' ' . get_option( 'time_format' ) ) . ')</option>';
        }
        $submits .= $drafts_select_end;		
    }
    return $submits;

}


add_action( 'wp_ajax_acfef/form_submit', 'acfef_form_submit' );
add_action( 'wp_ajax_nopriv_acfef/form_submit', 'acfef_form_submit' );
add_action( 'wp_ajax_acfef/forms/multi_step/change_step', 'acfef_change_step' );
add_action( 'wp_ajax_nopriv_acfef/forms/multi_step/change_step', 'acfef_change_step' );
add_action( 'admin_post_acfef/form_submit', 'acfef_form_submit' );
add_action( 'admin_post_nopriv_acfef/form_submit', 'acfef_form_submit' );
function acfef_form_submit() {
    acf()->form_front->check_submit_form();
}
function acfef_change_step() {
    if( !isset($_POST['form_data']) ) {
        return false;
    }

    $form = json_decode( acf_decrypt($_POST['form_data']), true );
    if( !$form ) {
        return false;
    }

    if( isset( $_POST['step'] ) ){
        $form[ 'step_index' ] = $_POST['step'];
        if( $form[ 'step_index' ] == count( $form[ 'fields' ][ 'steps' ] ) ){
            $form[ 'last_step' ] = true;
        }
    }else{
        $form[ 'step_index' ] = $form[ 'step_index' ]-1;	
        if( isset( $form[ 'last_step' ] ) )	unset( $form[ 'last_step' ] );		
    }

    ob_start();
    acfef_render_form( $form );
    $reload_form = ob_get_contents();
    ob_end_clean();

    wp_send_json_success( [ 'reload_form' => $reload_form ] );
    die;	
}